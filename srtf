#include <stdio.h>
#include <stdbool.h>

struct Process {
    int pid;        // Process ID
    int arrivalTime; // Arrival Time
    int burstTime;   // Burst Time
    int remainingTime; // Remaining Burst Time
    bool completed;  // Completion flag
};

int findShortestJob(struct Process processes[], int numProcesses, int currentTime) {
    int shortestJobIndex = -1;
    int shortestJobRemaining = -1;
    
    for (int i = 0; i < numProcesses; i++) {
        if (!processes[i].completed && processes[i].arrivalTime <= currentTime) {
            if (shortestJobIndex == -1 || processes[i].remainingTime < shortestJobRemaining) {
                shortestJobIndex = i;
                shortestJobRemaining = processes[i].remainingTime;
            }
        }
    }
    
    return shortestJobIndex;
}

void srtf(struct Process processes[], int numProcesses) {
    int currentTime = 0;
    int completedProcesses = 0;
    float totalTurnaroundTime = 0;
    float totalWaitingTime = 0;
    
    printf("Time\tProcess\tBurst Time\tTurnaround Time\tWaiting Time\n");
    
    while (completedProcesses < numProcesses) {
        int shortestJobIndex = findShortestJob(processes, numProcesses, currentTime);
        
        if (shortestJobIndex == -1) {
            currentTime++;
            continue;
        }
        
        struct Process *currentProcess = &processes[shortestJobIndex];
        
        currentProcess->remainingTime--;
        
        if (currentProcess->remainingTime == 0) {
            currentProcess->completed = true;
            completedProcesses++;
            
            int turnaroundTime = currentTime - currentProcess->arrivalTime + currentProcess->burstTime;
            int waitingTime = turnaroundTime - currentProcess->burstTime;
            
            totalTurnaroundTime += turnaroundTime;
            totalWaitingTime += waitingTime;
            
            printf("%d\t%d\t%d\t\t%d\t\t%d\n",
                   currentTime, currentProcess->pid, currentProcess->burstTime,
                   turnaroundTime, waitingTime);
        }
        
        currentTime++;
    }
    
    float averageTurnaroundTime = totalTurnaroundTime / numProcesses;
    float averageWaitingTime = totalWaitingTime / numProcesses;
    
    printf("Average Turnaround Time: %.2f\n", averageTurnaroundTime);
    printf("Average Waiting Time: %.2f\n", averageWaitingTime);
}

int main() {
    int numProcesses;
    
    printf("Enter the number of processes: ");
    scanf("%d", &numProcesses);
    
    struct Process processes[numProcesses];
    
    for (int i = 0; i < numProcesses; i++) {
        processes[i].pid = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        processes[i].remainingTime = processes[i].burstTime;
        processes[i].completed = false;
    }
    
    srtf(processes, numProcesses);
    
    return 0;
}
